
#ifndef _H_onf_config1_1
#define _H_onf_config1_1
/* 
 * Copyright (c) 2008-2012, Andy Bierman, All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump 2.2-4

    Combined SIL header
    module onf-config1.1
    revision 2011-12-07
    namespace urn:onf:of11:config:yang
    organization ONF Config Management Group

 */

#include <xmlstring.h>

#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "status.h"
#include "val.h"

#ifdef __cplusplus
extern "C" {
#endif

#define y_onf_config1_1_M_onf_config1_1 (const xmlChar *)"onf-config1.1"
#define y_onf_config1_1_R_onf_config1_1 (const xmlChar *)"2011-12-07"

#define y_onf_config1_1_N_DSAKeyValue (const xmlChar *)"DSAKeyValue"
#define y_onf_config1_1_N_Exponent (const xmlChar *)"Exponent"
#define y_onf_config1_1_N_G (const xmlChar *)"G"
#define y_onf_config1_1_N_J (const xmlChar *)"J"
#define y_onf_config1_1_N_Modulus (const xmlChar *)"Modulus"
#define y_onf_config1_1_N_P (const xmlChar *)"P"
#define y_onf_config1_1_N_PgenCounter (const xmlChar *)"PgenCounter"
#define y_onf_config1_1_N_Q (const xmlChar *)"Q"
#define y_onf_config1_1_N_RSAKeyValue (const xmlChar *)"RSAKeyValue"
#define y_onf_config1_1_N_Seed (const xmlChar *)"Seed"
#define y_onf_config1_1_N_Y (const xmlChar *)"Y"
#define y_onf_config1_1_N_action_types (const xmlChar *)"action-types"
#define y_onf_config1_1_N_admin_state (const xmlChar *)"admin-state"
#define y_onf_config1_1_N_advertised (const xmlChar *)"advertised"
#define y_onf_config1_1_N_advertised_peer (const xmlChar *)"advertised-peer"
#define y_onf_config1_1_N_apply_actions (const xmlChar *)"apply-actions"
#define y_onf_config1_1_N_apply_setfields (const xmlChar *)"apply-setfields"
#define y_onf_config1_1_N_auto_negotiate (const xmlChar *)"auto-negotiate"
#define y_onf_config1_1_N_block_looping_ports (const xmlChar *)"block-looping-ports"
#define y_onf_config1_1_N_blocked (const xmlChar *)"blocked"
#define y_onf_config1_1_N_capabilities (const xmlChar *)"capabilities"
#define y_onf_config1_1_N_capability (const xmlChar *)"capability"
#define y_onf_config1_1_N_capable_switch (const xmlChar *)"capable-switch"
#define y_onf_config1_1_N_certificate (const xmlChar *)"certificate"
#define y_onf_config1_1_N_checksum_present (const xmlChar *)"checksum-present"
#define y_onf_config1_1_N_configuration (const xmlChar *)"configuration"
#define y_onf_config1_1_N_configuration_point (const xmlChar *)"configuration-point"
#define y_onf_config1_1_N_configuration_points (const xmlChar *)"configuration-points"
#define y_onf_config1_1_N_connection_state (const xmlChar *)"connection-state"
#define y_onf_config1_1_N_controller (const xmlChar *)"controller"
#define y_onf_config1_1_N_controllers (const xmlChar *)"controllers"
#define y_onf_config1_1_N_current (const xmlChar *)"current"
#define y_onf_config1_1_N_current_rate (const xmlChar *)"current-rate"
#define y_onf_config1_1_N_current_version (const xmlChar *)"current-version"
#define y_onf_config1_1_N_datapath_id (const xmlChar *)"datapath-id"
#define y_onf_config1_1_N_dsa (const xmlChar *)"dsa"
#define y_onf_config1_1_N_enabled (const xmlChar *)"enabled"
#define y_onf_config1_1_N_experimenter (const xmlChar *)"experimenter"
#define y_onf_config1_1_N_external_certificate (const xmlChar *)"external-certificate"
#define y_onf_config1_1_N_features (const xmlChar *)"features"
#define y_onf_config1_1_N_flow_statistics (const xmlChar *)"flow-statistics"
#define y_onf_config1_1_N_flow_table (const xmlChar *)"flow-table"
#define y_onf_config1_1_N_group_capabilities (const xmlChar *)"group-capabilities"
#define y_onf_config1_1_N_group_statistics (const xmlChar *)"group-statistics"
#define y_onf_config1_1_N_group_types (const xmlChar *)"group-types"
#define y_onf_config1_1_N_id (const xmlChar *)"id"
#define y_onf_config1_1_N_instruction_types (const xmlChar *)"instruction-types"
#define y_onf_config1_1_N_instructions (const xmlChar *)"instructions"
#define y_onf_config1_1_N_ip_address (const xmlChar *)"ip-address"
#define y_onf_config1_1_N_ipgre_tunnel (const xmlChar *)"ipgre-tunnel"
#define y_onf_config1_1_N_key (const xmlChar *)"key"
#define y_onf_config1_1_N_key_present (const xmlChar *)"key-present"
#define y_onf_config1_1_N_key_type (const xmlChar *)"key-type"
#define y_onf_config1_1_N_live (const xmlChar *)"live"
#define y_onf_config1_1_N_local_endpoint_address (const xmlChar *)"local-endpoint-address"
#define y_onf_config1_1_N_local_endpoint_ipv4_adress (const xmlChar *)"local-endpoint-ipv4-adress"
#define y_onf_config1_1_N_local_endpoint_ipv6_adress (const xmlChar *)"local-endpoint-ipv6-adress"
#define y_onf_config1_1_N_local_endpoint_mac_adress (const xmlChar *)"local-endpoint-mac-adress"
#define y_onf_config1_1_N_local_ip_address (const xmlChar *)"local-ip-address"
#define y_onf_config1_1_N_local_port (const xmlChar *)"local-port"
#define y_onf_config1_1_N_logical_switches (const xmlChar *)"logical-switches"
#define y_onf_config1_1_N_matches (const xmlChar *)"matches"
#define y_onf_config1_1_N_max_buffered_packets (const xmlChar *)"max-buffered-packets"
#define y_onf_config1_1_N_max_entries (const xmlChar *)"max-entries"
#define y_onf_config1_1_N_max_ports (const xmlChar *)"max-ports"
#define y_onf_config1_1_N_max_rate (const xmlChar *)"max-rate"
#define y_onf_config1_1_N_max_tables (const xmlChar *)"max-tables"
#define y_onf_config1_1_N_medium (const xmlChar *)"medium"
#define y_onf_config1_1_N_metadata_match (const xmlChar *)"metadata-match"
#define y_onf_config1_1_N_metadata_write (const xmlChar *)"metadata-write"
#define y_onf_config1_1_N_min_rate (const xmlChar *)"min-rate"
#define y_onf_config1_1_N_name (const xmlChar *)"name"
#define y_onf_config1_1_N_next_tables (const xmlChar *)"next-tables"
#define y_onf_config1_1_N_no_forward (const xmlChar *)"no-forward"
#define y_onf_config1_1_N_no_packet_in (const xmlChar *)"no-packet-in"
#define y_onf_config1_1_N_no_receive (const xmlChar *)"no-receive"
#define y_onf_config1_1_N_number (const xmlChar *)"number"
#define y_onf_config1_1_N_nvgre_tunnel (const xmlChar *)"nvgre-tunnel"
#define y_onf_config1_1_N_oper_state (const xmlChar *)"oper-state"
#define y_onf_config1_1_N_owned_certificate (const xmlChar *)"owned-certificate"
#define y_onf_config1_1_N_pause (const xmlChar *)"pause"
#define y_onf_config1_1_N_port (const xmlChar *)"port"
#define y_onf_config1_1_N_port_statistics (const xmlChar *)"port-statistics"
#define y_onf_config1_1_N_private_key (const xmlChar *)"private-key"
#define y_onf_config1_1_N_properties (const xmlChar *)"properties"
#define y_onf_config1_1_N_protocol (const xmlChar *)"protocol"
#define y_onf_config1_1_N_queue (const xmlChar *)"queue"
#define y_onf_config1_1_N_queue_statistics (const xmlChar *)"queue-statistics"
#define y_onf_config1_1_N_rate (const xmlChar *)"rate"
#define y_onf_config1_1_N_reassemble_ip_fragments (const xmlChar *)"reassemble-ip-fragments"
#define y_onf_config1_1_N_remote_endpoint_address (const xmlChar *)"remote-endpoint-address"
#define y_onf_config1_1_N_remote_endpoint_ipv4_adress (const xmlChar *)"remote-endpoint-ipv4-adress"
#define y_onf_config1_1_N_remote_endpoint_ipv6_adress (const xmlChar *)"remote-endpoint-ipv6-adress"
#define y_onf_config1_1_N_remote_endpoint_mac_adress (const xmlChar *)"remote-endpoint-mac-adress"
#define y_onf_config1_1_N_reserved_port_types (const xmlChar *)"reserved-port-types"
#define y_onf_config1_1_N_resource_id (const xmlChar *)"resource-id"
#define y_onf_config1_1_N_resources (const xmlChar *)"resources"
#define y_onf_config1_1_N_role (const xmlChar *)"role"
#define y_onf_config1_1_N_rsa (const xmlChar *)"rsa"
#define y_onf_config1_1_N_sequence_number_present (const xmlChar *)"sequence-number-present"
#define y_onf_config1_1_N_state (const xmlChar *)"state"
#define y_onf_config1_1_N_supported (const xmlChar *)"supported"
#define y_onf_config1_1_N_supported_versions (const xmlChar *)"supported-versions"
#define y_onf_config1_1_N_switch (const xmlChar *)"switch"
#define y_onf_config1_1_N_table_id (const xmlChar *)"table-id"
#define y_onf_config1_1_N_table_statistics (const xmlChar *)"table-statistics"
#define y_onf_config1_1_N_tni (const xmlChar *)"tni"
#define y_onf_config1_1_N_tni_multicast_group (const xmlChar *)"tni-multicast-group"
#define y_onf_config1_1_N_tni_user (const xmlChar *)"tni-user"
#define y_onf_config1_1_N_tunnel (const xmlChar *)"tunnel"
#define y_onf_config1_1_N_tunnel_type (const xmlChar *)"tunnel-type"
#define y_onf_config1_1_N_type (const xmlChar *)"type"
#define y_onf_config1_1_N_udp_checksum (const xmlChar *)"udp-checksum"
#define y_onf_config1_1_N_udp_dest_port (const xmlChar *)"udp-dest-port"
#define y_onf_config1_1_N_udp_source_port (const xmlChar *)"udp-source-port"
#define y_onf_config1_1_N_uri (const xmlChar *)"uri"
#define y_onf_config1_1_N_vni (const xmlChar *)"vni"
#define y_onf_config1_1_N_vni_multicast_group (const xmlChar *)"vni-multicast-group"
#define y_onf_config1_1_N_vni_valid (const xmlChar *)"vni-valid"
#define y_onf_config1_1_N_vxlan_tunnel (const xmlChar *)"vxlan-tunnel"
#define y_onf_config1_1_N_wildcards (const xmlChar *)"wildcards"
#define y_onf_config1_1_N_write_actions (const xmlChar *)"write-actions"
#define y_onf_config1_1_N_write_setfields (const xmlChar *)"write-setfields"

/* list /capable-switch/configuration-points/configuration-point */
typedef struct y_onf_config1_1_T_capable_switch_configuration_points_configuration_point_ {
    dlq_hdr_t qhdr;
    xmlChar *id;
    xmlChar *uri;
    xmlChar *protocol;
} y_onf_config1_1_T_capable_switch_configuration_points_configuration_point;

/* container /capable-switch/configuration-points */
typedef struct y_onf_config1_1_T_capable_switch_configuration_points_ {
    dlq_hdr_t configuration_point;
} y_onf_config1_1_T_capable_switch_configuration_points;

/* container /capable-switch/resources/port/configuration */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_configuration_ {
    xmlChar *admin_state;
    boolean no_receive;
    boolean no_forward;
    boolean no_packet_in;
} y_onf_config1_1_T_capable_switch_resources_port_configuration;

/* container /capable-switch/resources/port/state */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_state_ {
    xmlChar *oper_state;
    boolean blocked;
    boolean live;
} y_onf_config1_1_T_capable_switch_resources_port_state;

/* container /capable-switch/resources/port/features/current */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_features_current_ {
    xmlChar *rate;
    boolean auto_negotiate;
    xmlChar *medium;
    xmlChar *pause;
} y_onf_config1_1_T_capable_switch_resources_port_features_current;

/* leaf-list /capable-switch/resources/port/features/advertised/rate */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_features_advertised_rate_ {
    dlq_hdr_t qhdr;
    xmlChar *rate;
} y_onf_config1_1_T_capable_switch_resources_port_features_advertised_rate;

/* leaf-list /capable-switch/resources/port/features/advertised/medium */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_features_advertised_medium_ {
    dlq_hdr_t qhdr;
    xmlChar *medium;
} y_onf_config1_1_T_capable_switch_resources_port_features_advertised_medium;

/* container /capable-switch/resources/port/features/advertised */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_features_advertised_ {
    dlq_hdr_t rate;
    boolean auto_negotiate;
    dlq_hdr_t medium;
    xmlChar *pause;
} y_onf_config1_1_T_capable_switch_resources_port_features_advertised;

/* leaf-list /capable-switch/resources/port/features/supported/rate */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_features_supported_rate_ {
    dlq_hdr_t qhdr;
    xmlChar *rate;
} y_onf_config1_1_T_capable_switch_resources_port_features_supported_rate;

/* leaf-list /capable-switch/resources/port/features/supported/medium */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_features_supported_medium_ {
    dlq_hdr_t qhdr;
    xmlChar *medium;
} y_onf_config1_1_T_capable_switch_resources_port_features_supported_medium;

/* container /capable-switch/resources/port/features/supported */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_features_supported_ {
    dlq_hdr_t rate;
    boolean auto_negotiate;
    dlq_hdr_t medium;
    xmlChar *pause;
} y_onf_config1_1_T_capable_switch_resources_port_features_supported;

/* leaf-list /capable-switch/resources/port/features/advertised-peer/rate */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_features_advertised_peer_rate_ {
    dlq_hdr_t qhdr;
    xmlChar *rate;
} y_onf_config1_1_T_capable_switch_resources_port_features_advertised_peer_rate;

/* leaf-list /capable-switch/resources/port/features/advertised-peer/medium */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_features_advertised_peer_medium_ {
    dlq_hdr_t qhdr;
    xmlChar *medium;
} y_onf_config1_1_T_capable_switch_resources_port_features_advertised_peer_medium;

/* container /capable-switch/resources/port/features/advertised-peer */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_features_advertised_peer_ {
    dlq_hdr_t rate;
    boolean auto_negotiate;
    dlq_hdr_t medium;
    xmlChar *pause;
} y_onf_config1_1_T_capable_switch_resources_port_features_advertised_peer;

/* container /capable-switch/resources/port/features */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_features_ {
    y_onf_config1_1_T_capable_switch_resources_port_features_current current;
    y_onf_config1_1_T_capable_switch_resources_port_features_advertised advertised;
    y_onf_config1_1_T_capable_switch_resources_port_features_supported supported;
    y_onf_config1_1_T_capable_switch_resources_port_features_advertised_peer advertised_peer;
} y_onf_config1_1_T_capable_switch_resources_port_features;

/* case /capable-switch/resources/port/tunnel-type/tunnel/tunnel/local-endpoint-address/local-endpoint-ipv4-adress */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_local_endpoint_address_local_endpoint_ipv4_adress_ {
    xmlChar *local_endpoint_ipv4_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_local_endpoint_address_local_endpoint_ipv4_adress;

/* case /capable-switch/resources/port/tunnel-type/tunnel/tunnel/local-endpoint-address/local-endpoint-ipv6-adress */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_local_endpoint_address_local_endpoint_ipv6_adress_ {
    xmlChar *local_endpoint_ipv6_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_local_endpoint_address_local_endpoint_ipv6_adress;

/* case /capable-switch/resources/port/tunnel-type/tunnel/tunnel/local-endpoint-address/local-endpoint-mac-adress */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_local_endpoint_address_local_endpoint_mac_adress_ {
    xmlChar *local_endpoint_mac_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_local_endpoint_address_local_endpoint_mac_adress;

/* choice /capable-switch/resources/port/tunnel-type/tunnel/tunnel/local-endpoint-address */
typedef union y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_local_endpoint_address_ {
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_local_endpoint_address_local_endpoint_ipv4_adress local_endpoint_ipv4_adress;
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_local_endpoint_address_local_endpoint_ipv6_adress local_endpoint_ipv6_adress;
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_local_endpoint_address_local_endpoint_mac_adress local_endpoint_mac_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_local_endpoint_address;

/* case /capable-switch/resources/port/tunnel-type/tunnel/tunnel/remote-endpoint-address/remote-endpoint-ipv4-adress */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_remote_endpoint_address_remote_endpoint_ipv4_adress_ {
    xmlChar *remote_endpoint_ipv4_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_remote_endpoint_address_remote_endpoint_ipv4_adress;

/* case /capable-switch/resources/port/tunnel-type/tunnel/tunnel/remote-endpoint-address/remote-endpoint-ipv6-adress */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_remote_endpoint_address_remote_endpoint_ipv6_adress_ {
    xmlChar *remote_endpoint_ipv6_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_remote_endpoint_address_remote_endpoint_ipv6_adress;

/* case /capable-switch/resources/port/tunnel-type/tunnel/tunnel/remote-endpoint-address/remote-endpoint-mac-adress */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_remote_endpoint_address_remote_endpoint_mac_adress_ {
    xmlChar *remote_endpoint_mac_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_remote_endpoint_address_remote_endpoint_mac_adress;

/* choice /capable-switch/resources/port/tunnel-type/tunnel/tunnel/remote-endpoint-address */
typedef union y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_remote_endpoint_address_ {
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_remote_endpoint_address_remote_endpoint_ipv4_adress remote_endpoint_ipv4_adress;
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_remote_endpoint_address_remote_endpoint_ipv6_adress remote_endpoint_ipv6_adress;
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_remote_endpoint_address_remote_endpoint_mac_adress remote_endpoint_mac_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_remote_endpoint_address;

/* container /capable-switch/resources/port/tunnel-type/tunnel/tunnel */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_ {
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_local_endpoint_address local_endpoint_address;
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel_remote_endpoint_address remote_endpoint_address;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel;

/* case /capable-switch/resources/port/tunnel-type/tunnel */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_ {
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel_tunnel tunnel;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel;

/* case /capable-switch/resources/port/tunnel-type/ipgre-tunnel/ipgre-tunnel/local-endpoint-address/local-endpoint-ipv4-adress */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_local_endpoint_address_local_endpoint_ipv4_adress_ {
    xmlChar *local_endpoint_ipv4_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_local_endpoint_address_local_endpoint_ipv4_adress;

/* case /capable-switch/resources/port/tunnel-type/ipgre-tunnel/ipgre-tunnel/local-endpoint-address/local-endpoint-ipv6-adress */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_local_endpoint_address_local_endpoint_ipv6_adress_ {
    xmlChar *local_endpoint_ipv6_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_local_endpoint_address_local_endpoint_ipv6_adress;

/* case /capable-switch/resources/port/tunnel-type/ipgre-tunnel/ipgre-tunnel/local-endpoint-address/local-endpoint-mac-adress */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_local_endpoint_address_local_endpoint_mac_adress_ {
    xmlChar *local_endpoint_mac_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_local_endpoint_address_local_endpoint_mac_adress;

/* choice /capable-switch/resources/port/tunnel-type/ipgre-tunnel/ipgre-tunnel/local-endpoint-address */
typedef union y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_local_endpoint_address_ {
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_local_endpoint_address_local_endpoint_ipv4_adress local_endpoint_ipv4_adress;
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_local_endpoint_address_local_endpoint_ipv6_adress local_endpoint_ipv6_adress;
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_local_endpoint_address_local_endpoint_mac_adress local_endpoint_mac_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_local_endpoint_address;

/* case /capable-switch/resources/port/tunnel-type/ipgre-tunnel/ipgre-tunnel/remote-endpoint-address/remote-endpoint-ipv4-adress */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_remote_endpoint_address_remote_endpoint_ipv4_adress_ {
    xmlChar *remote_endpoint_ipv4_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_remote_endpoint_address_remote_endpoint_ipv4_adress;

/* case /capable-switch/resources/port/tunnel-type/ipgre-tunnel/ipgre-tunnel/remote-endpoint-address/remote-endpoint-ipv6-adress */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_remote_endpoint_address_remote_endpoint_ipv6_adress_ {
    xmlChar *remote_endpoint_ipv6_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_remote_endpoint_address_remote_endpoint_ipv6_adress;

/* case /capable-switch/resources/port/tunnel-type/ipgre-tunnel/ipgre-tunnel/remote-endpoint-address/remote-endpoint-mac-adress */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_remote_endpoint_address_remote_endpoint_mac_adress_ {
    xmlChar *remote_endpoint_mac_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_remote_endpoint_address_remote_endpoint_mac_adress;

/* choice /capable-switch/resources/port/tunnel-type/ipgre-tunnel/ipgre-tunnel/remote-endpoint-address */
typedef union y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_remote_endpoint_address_ {
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_remote_endpoint_address_remote_endpoint_ipv4_adress remote_endpoint_ipv4_adress;
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_remote_endpoint_address_remote_endpoint_ipv6_adress remote_endpoint_ipv6_adress;
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_remote_endpoint_address_remote_endpoint_mac_adress remote_endpoint_mac_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_remote_endpoint_address;

/* container /capable-switch/resources/port/tunnel-type/ipgre-tunnel/ipgre-tunnel */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_ {
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_local_endpoint_address local_endpoint_address;
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel_remote_endpoint_address remote_endpoint_address;
    boolean checksum_present;
    boolean key_present;
    uint32 key;
    boolean sequence_number_present;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel;

/* case /capable-switch/resources/port/tunnel-type/ipgre-tunnel */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ {
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel_ipgre_tunnel ipgre_tunnel;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel;

/* case /capable-switch/resources/port/tunnel-type/vxlan-tunnel/vxlan-tunnel/local-endpoint-address/local-endpoint-ipv4-adress */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_local_endpoint_address_local_endpoint_ipv4_adress_ {
    xmlChar *local_endpoint_ipv4_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_local_endpoint_address_local_endpoint_ipv4_adress;

/* case /capable-switch/resources/port/tunnel-type/vxlan-tunnel/vxlan-tunnel/local-endpoint-address/local-endpoint-ipv6-adress */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_local_endpoint_address_local_endpoint_ipv6_adress_ {
    xmlChar *local_endpoint_ipv6_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_local_endpoint_address_local_endpoint_ipv6_adress;

/* case /capable-switch/resources/port/tunnel-type/vxlan-tunnel/vxlan-tunnel/local-endpoint-address/local-endpoint-mac-adress */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_local_endpoint_address_local_endpoint_mac_adress_ {
    xmlChar *local_endpoint_mac_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_local_endpoint_address_local_endpoint_mac_adress;

/* choice /capable-switch/resources/port/tunnel-type/vxlan-tunnel/vxlan-tunnel/local-endpoint-address */
typedef union y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_local_endpoint_address_ {
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_local_endpoint_address_local_endpoint_ipv4_adress local_endpoint_ipv4_adress;
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_local_endpoint_address_local_endpoint_ipv6_adress local_endpoint_ipv6_adress;
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_local_endpoint_address_local_endpoint_mac_adress local_endpoint_mac_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_local_endpoint_address;

/* case /capable-switch/resources/port/tunnel-type/vxlan-tunnel/vxlan-tunnel/remote-endpoint-address/remote-endpoint-ipv4-adress */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_remote_endpoint_address_remote_endpoint_ipv4_adress_ {
    xmlChar *remote_endpoint_ipv4_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_remote_endpoint_address_remote_endpoint_ipv4_adress;

/* case /capable-switch/resources/port/tunnel-type/vxlan-tunnel/vxlan-tunnel/remote-endpoint-address/remote-endpoint-ipv6-adress */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_remote_endpoint_address_remote_endpoint_ipv6_adress_ {
    xmlChar *remote_endpoint_ipv6_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_remote_endpoint_address_remote_endpoint_ipv6_adress;

/* case /capable-switch/resources/port/tunnel-type/vxlan-tunnel/vxlan-tunnel/remote-endpoint-address/remote-endpoint-mac-adress */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_remote_endpoint_address_remote_endpoint_mac_adress_ {
    xmlChar *remote_endpoint_mac_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_remote_endpoint_address_remote_endpoint_mac_adress;

/* choice /capable-switch/resources/port/tunnel-type/vxlan-tunnel/vxlan-tunnel/remote-endpoint-address */
typedef union y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_remote_endpoint_address_ {
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_remote_endpoint_address_remote_endpoint_ipv4_adress remote_endpoint_ipv4_adress;
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_remote_endpoint_address_remote_endpoint_ipv6_adress remote_endpoint_ipv6_adress;
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_remote_endpoint_address_remote_endpoint_mac_adress remote_endpoint_mac_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_remote_endpoint_address;

/* container /capable-switch/resources/port/tunnel-type/vxlan-tunnel/vxlan-tunnel */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_ {
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_local_endpoint_address local_endpoint_address;
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel_remote_endpoint_address remote_endpoint_address;
    boolean vni_valid;
    uint32 vni;
    val_value_t *vni_multicast_group;
    uint16 udp_source_port;
    uint16 udp_dest_port;
    boolean udp_checksum;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel;

/* case /capable-switch/resources/port/tunnel-type/vxlan-tunnel */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_ {
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel_vxlan_tunnel vxlan_tunnel;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel;

/* case /capable-switch/resources/port/tunnel-type/nvgre-tunnel/nvgre-tunnel/local-endpoint-address/local-endpoint-ipv4-adress */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_local_endpoint_address_local_endpoint_ipv4_adress_ {
    xmlChar *local_endpoint_ipv4_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_local_endpoint_address_local_endpoint_ipv4_adress;

/* case /capable-switch/resources/port/tunnel-type/nvgre-tunnel/nvgre-tunnel/local-endpoint-address/local-endpoint-ipv6-adress */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_local_endpoint_address_local_endpoint_ipv6_adress_ {
    xmlChar *local_endpoint_ipv6_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_local_endpoint_address_local_endpoint_ipv6_adress;

/* case /capable-switch/resources/port/tunnel-type/nvgre-tunnel/nvgre-tunnel/local-endpoint-address/local-endpoint-mac-adress */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_local_endpoint_address_local_endpoint_mac_adress_ {
    xmlChar *local_endpoint_mac_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_local_endpoint_address_local_endpoint_mac_adress;

/* choice /capable-switch/resources/port/tunnel-type/nvgre-tunnel/nvgre-tunnel/local-endpoint-address */
typedef union y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_local_endpoint_address_ {
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_local_endpoint_address_local_endpoint_ipv4_adress local_endpoint_ipv4_adress;
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_local_endpoint_address_local_endpoint_ipv6_adress local_endpoint_ipv6_adress;
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_local_endpoint_address_local_endpoint_mac_adress local_endpoint_mac_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_local_endpoint_address;

/* case /capable-switch/resources/port/tunnel-type/nvgre-tunnel/nvgre-tunnel/remote-endpoint-address/remote-endpoint-ipv4-adress */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_remote_endpoint_address_remote_endpoint_ipv4_adress_ {
    xmlChar *remote_endpoint_ipv4_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_remote_endpoint_address_remote_endpoint_ipv4_adress;

/* case /capable-switch/resources/port/tunnel-type/nvgre-tunnel/nvgre-tunnel/remote-endpoint-address/remote-endpoint-ipv6-adress */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_remote_endpoint_address_remote_endpoint_ipv6_adress_ {
    xmlChar *remote_endpoint_ipv6_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_remote_endpoint_address_remote_endpoint_ipv6_adress;

/* case /capable-switch/resources/port/tunnel-type/nvgre-tunnel/nvgre-tunnel/remote-endpoint-address/remote-endpoint-mac-adress */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_remote_endpoint_address_remote_endpoint_mac_adress_ {
    xmlChar *remote_endpoint_mac_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_remote_endpoint_address_remote_endpoint_mac_adress;

/* choice /capable-switch/resources/port/tunnel-type/nvgre-tunnel/nvgre-tunnel/remote-endpoint-address */
typedef union y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_remote_endpoint_address_ {
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_remote_endpoint_address_remote_endpoint_ipv4_adress remote_endpoint_ipv4_adress;
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_remote_endpoint_address_remote_endpoint_ipv6_adress remote_endpoint_ipv6_adress;
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_remote_endpoint_address_remote_endpoint_mac_adress remote_endpoint_mac_adress;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_remote_endpoint_address;

/* container /capable-switch/resources/port/tunnel-type/nvgre-tunnel/nvgre-tunnel */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_ {
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_local_endpoint_address local_endpoint_address;
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel_remote_endpoint_address remote_endpoint_address;
    uint32 tni;
    uint32 tni_user;
    val_value_t *tni_multicast_group;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel;

/* case /capable-switch/resources/port/tunnel-type/nvgre-tunnel */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_ {
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel_nvgre_tunnel nvgre_tunnel;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel;

/* choice /capable-switch/resources/port/tunnel-type */
typedef union y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ {
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_tunnel tunnel;
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_ipgre_tunnel ipgre_tunnel;
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_vxlan_tunnel vxlan_tunnel;
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type_nvgre_tunnel nvgre_tunnel;
} y_onf_config1_1_T_capable_switch_resources_port_tunnel_type;

/* list /capable-switch/resources/port */
typedef struct y_onf_config1_1_T_capable_switch_resources_port_ {
    dlq_hdr_t qhdr;
    xmlChar *resource_id;
    uint64 number;
    xmlChar *name;
    uint32 current_rate;
    uint32 max_rate;
    y_onf_config1_1_T_capable_switch_resources_port_configuration configuration;
    y_onf_config1_1_T_capable_switch_resources_port_state state;
    y_onf_config1_1_T_capable_switch_resources_port_features features;
    y_onf_config1_1_T_capable_switch_resources_port_tunnel_type tunnel_type;
} y_onf_config1_1_T_capable_switch_resources_port;

/* leaf-list /capable-switch/resources/queue/properties/experimenter */
typedef struct y_onf_config1_1_T_capable_switch_resources_queue_properties_experimenter_ {
    dlq_hdr_t qhdr;
    uint32 experimenter;
} y_onf_config1_1_T_capable_switch_resources_queue_properties_experimenter;

/* container /capable-switch/resources/queue/properties */
typedef struct y_onf_config1_1_T_capable_switch_resources_queue_properties_ {
    uint16 min_rate;
    uint16 max_rate;
    dlq_hdr_t experimenter;
} y_onf_config1_1_T_capable_switch_resources_queue_properties;

/* list /capable-switch/resources/queue */
typedef struct y_onf_config1_1_T_capable_switch_resources_queue_ {
    dlq_hdr_t qhdr;
    xmlChar *resource_id;
    uint64 id;
    xmlChar *port;
    y_onf_config1_1_T_capable_switch_resources_queue_properties properties;
} y_onf_config1_1_T_capable_switch_resources_queue;

/* container /capable-switch/resources/owned-certificate/private-key/key-type/dsa/DSAKeyValue */
typedef struct y_onf_config1_1_T_capable_switch_resources_owned_certificate_private_key_key_type_dsa_DSAKeyValue_ {
    xmlChar *P;
    xmlChar *Q;
    xmlChar *J;
    xmlChar *G;
    xmlChar *Y;
    xmlChar *Seed;
    xmlChar *PgenCounter;
} y_onf_config1_1_T_capable_switch_resources_owned_certificate_private_key_key_type_dsa_DSAKeyValue;

/* case /capable-switch/resources/owned-certificate/private-key/key-type/dsa */
typedef struct y_onf_config1_1_T_capable_switch_resources_owned_certificate_private_key_key_type_dsa_ {
    y_onf_config1_1_T_capable_switch_resources_owned_certificate_private_key_key_type_dsa_DSAKeyValue DSAKeyValue;
} y_onf_config1_1_T_capable_switch_resources_owned_certificate_private_key_key_type_dsa;

/* container /capable-switch/resources/owned-certificate/private-key/key-type/rsa/RSAKeyValue */
typedef struct y_onf_config1_1_T_capable_switch_resources_owned_certificate_private_key_key_type_rsa_RSAKeyValue_ {
    xmlChar *Modulus;
    xmlChar *Exponent;
} y_onf_config1_1_T_capable_switch_resources_owned_certificate_private_key_key_type_rsa_RSAKeyValue;

/* case /capable-switch/resources/owned-certificate/private-key/key-type/rsa */
typedef struct y_onf_config1_1_T_capable_switch_resources_owned_certificate_private_key_key_type_rsa_ {
    y_onf_config1_1_T_capable_switch_resources_owned_certificate_private_key_key_type_rsa_RSAKeyValue RSAKeyValue;
} y_onf_config1_1_T_capable_switch_resources_owned_certificate_private_key_key_type_rsa;

/* choice /capable-switch/resources/owned-certificate/private-key/key-type */
typedef union y_onf_config1_1_T_capable_switch_resources_owned_certificate_private_key_key_type_ {
    y_onf_config1_1_T_capable_switch_resources_owned_certificate_private_key_key_type_dsa dsa;
    y_onf_config1_1_T_capable_switch_resources_owned_certificate_private_key_key_type_rsa rsa;
} y_onf_config1_1_T_capable_switch_resources_owned_certificate_private_key_key_type;

/* container /capable-switch/resources/owned-certificate/private-key */
typedef struct y_onf_config1_1_T_capable_switch_resources_owned_certificate_private_key_ {
    y_onf_config1_1_T_capable_switch_resources_owned_certificate_private_key_key_type key_type;
} y_onf_config1_1_T_capable_switch_resources_owned_certificate_private_key;

/* list /capable-switch/resources/owned-certificate */
typedef struct y_onf_config1_1_T_capable_switch_resources_owned_certificate_ {
    dlq_hdr_t qhdr;
    xmlChar *resource_id;
    xmlChar *certificate;
    y_onf_config1_1_T_capable_switch_resources_owned_certificate_private_key private_key;
} y_onf_config1_1_T_capable_switch_resources_owned_certificate;

/* list /capable-switch/resources/external-certificate */
typedef struct y_onf_config1_1_T_capable_switch_resources_external_certificate_ {
    dlq_hdr_t qhdr;
    xmlChar *resource_id;
    xmlChar *certificate;
} y_onf_config1_1_T_capable_switch_resources_external_certificate;

/* leaf-list /capable-switch/resources/flow-table/next-tables/table-id */
typedef struct y_onf_config1_1_T_capable_switch_resources_flow_table_next_tables_table_id_ {
    dlq_hdr_t qhdr;
    xmlChar *table_id;
} y_onf_config1_1_T_capable_switch_resources_flow_table_next_tables_table_id;

/* container /capable-switch/resources/flow-table/next-tables */
typedef struct y_onf_config1_1_T_capable_switch_resources_flow_table_next_tables_ {
    dlq_hdr_t table_id;
} y_onf_config1_1_T_capable_switch_resources_flow_table_next_tables;

/* leaf-list /capable-switch/resources/flow-table/instructions/type */
typedef struct y_onf_config1_1_T_capable_switch_resources_flow_table_instructions_type_ {
    dlq_hdr_t qhdr;
    xmlChar *type;
} y_onf_config1_1_T_capable_switch_resources_flow_table_instructions_type;

/* container /capable-switch/resources/flow-table/instructions */
typedef struct y_onf_config1_1_T_capable_switch_resources_flow_table_instructions_ {
    dlq_hdr_t type;
} y_onf_config1_1_T_capable_switch_resources_flow_table_instructions;

/* leaf-list /capable-switch/resources/flow-table/matches/type */
typedef struct y_onf_config1_1_T_capable_switch_resources_flow_table_matches_type_ {
    dlq_hdr_t qhdr;
    xmlChar *type;
} y_onf_config1_1_T_capable_switch_resources_flow_table_matches_type;

/* container /capable-switch/resources/flow-table/matches */
typedef struct y_onf_config1_1_T_capable_switch_resources_flow_table_matches_ {
    dlq_hdr_t type;
} y_onf_config1_1_T_capable_switch_resources_flow_table_matches;

/* leaf-list /capable-switch/resources/flow-table/write-actions/type */
typedef struct y_onf_config1_1_T_capable_switch_resources_flow_table_write_actions_type_ {
    dlq_hdr_t qhdr;
    xmlChar *type;
} y_onf_config1_1_T_capable_switch_resources_flow_table_write_actions_type;

/* container /capable-switch/resources/flow-table/write-actions */
typedef struct y_onf_config1_1_T_capable_switch_resources_flow_table_write_actions_ {
    dlq_hdr_t type;
} y_onf_config1_1_T_capable_switch_resources_flow_table_write_actions;

/* leaf-list /capable-switch/resources/flow-table/apply-actions/type */
typedef struct y_onf_config1_1_T_capable_switch_resources_flow_table_apply_actions_type_ {
    dlq_hdr_t qhdr;
    xmlChar *type;
} y_onf_config1_1_T_capable_switch_resources_flow_table_apply_actions_type;

/* container /capable-switch/resources/flow-table/apply-actions */
typedef struct y_onf_config1_1_T_capable_switch_resources_flow_table_apply_actions_ {
    dlq_hdr_t type;
} y_onf_config1_1_T_capable_switch_resources_flow_table_apply_actions;

/* leaf-list /capable-switch/resources/flow-table/write-setfields/type */
typedef struct y_onf_config1_1_T_capable_switch_resources_flow_table_write_setfields_type_ {
    dlq_hdr_t qhdr;
    xmlChar *type;
} y_onf_config1_1_T_capable_switch_resources_flow_table_write_setfields_type;

/* container /capable-switch/resources/flow-table/write-setfields */
typedef struct y_onf_config1_1_T_capable_switch_resources_flow_table_write_setfields_ {
    dlq_hdr_t type;
} y_onf_config1_1_T_capable_switch_resources_flow_table_write_setfields;

/* leaf-list /capable-switch/resources/flow-table/apply-setfields/type */
typedef struct y_onf_config1_1_T_capable_switch_resources_flow_table_apply_setfields_type_ {
    dlq_hdr_t qhdr;
    xmlChar *type;
} y_onf_config1_1_T_capable_switch_resources_flow_table_apply_setfields_type;

/* container /capable-switch/resources/flow-table/apply-setfields */
typedef struct y_onf_config1_1_T_capable_switch_resources_flow_table_apply_setfields_ {
    dlq_hdr_t type;
} y_onf_config1_1_T_capable_switch_resources_flow_table_apply_setfields;

/* leaf-list /capable-switch/resources/flow-table/wildcards/type */
typedef struct y_onf_config1_1_T_capable_switch_resources_flow_table_wildcards_type_ {
    dlq_hdr_t qhdr;
    xmlChar *type;
} y_onf_config1_1_T_capable_switch_resources_flow_table_wildcards_type;

/* container /capable-switch/resources/flow-table/wildcards */
typedef struct y_onf_config1_1_T_capable_switch_resources_flow_table_wildcards_ {
    dlq_hdr_t type;
} y_onf_config1_1_T_capable_switch_resources_flow_table_wildcards;

/* list /capable-switch/resources/flow-table */
typedef struct y_onf_config1_1_T_capable_switch_resources_flow_table_ {
    dlq_hdr_t qhdr;
    xmlChar *resource_id;
    uint8 max_entries;
    y_onf_config1_1_T_capable_switch_resources_flow_table_next_tables next_tables;
    y_onf_config1_1_T_capable_switch_resources_flow_table_instructions instructions;
    y_onf_config1_1_T_capable_switch_resources_flow_table_matches matches;
    y_onf_config1_1_T_capable_switch_resources_flow_table_write_actions write_actions;
    y_onf_config1_1_T_capable_switch_resources_flow_table_apply_actions apply_actions;
    y_onf_config1_1_T_capable_switch_resources_flow_table_write_setfields write_setfields;
    y_onf_config1_1_T_capable_switch_resources_flow_table_apply_setfields apply_setfields;
    y_onf_config1_1_T_capable_switch_resources_flow_table_wildcards wildcards;
    xmlChar *metadata_match;
    xmlChar *metadata_write;
} y_onf_config1_1_T_capable_switch_resources_flow_table;

/* container /capable-switch/resources */
typedef struct y_onf_config1_1_T_capable_switch_resources_ {
    dlq_hdr_t port;
    dlq_hdr_t queue;
    dlq_hdr_t owned_certificate;
    dlq_hdr_t external_certificate;
    dlq_hdr_t flow_table;
} y_onf_config1_1_T_capable_switch_resources;

/* leaf-list /capable-switch/logical-switches/switch/capabilities/reserved-port-types/type */
typedef struct y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_reserved_port_types_type_ {
    dlq_hdr_t qhdr;
    xmlChar *type;
} y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_reserved_port_types_type;

/* container /capable-switch/logical-switches/switch/capabilities/reserved-port-types */
typedef struct y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_reserved_port_types_ {
    dlq_hdr_t type;
} y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_reserved_port_types;

/* leaf-list /capable-switch/logical-switches/switch/capabilities/group-types/type */
typedef struct y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_group_types_type_ {
    dlq_hdr_t qhdr;
    xmlChar *type;
} y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_group_types_type;

/* container /capable-switch/logical-switches/switch/capabilities/group-types */
typedef struct y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_group_types_ {
    dlq_hdr_t type;
} y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_group_types;

/* leaf-list /capable-switch/logical-switches/switch/capabilities/group-capabilities/capability */
typedef struct y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_group_capabilities_capability_ {
    dlq_hdr_t qhdr;
    xmlChar *capability;
} y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_group_capabilities_capability;

/* container /capable-switch/logical-switches/switch/capabilities/group-capabilities */
typedef struct y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_group_capabilities_ {
    dlq_hdr_t capability;
} y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_group_capabilities;

/* leaf-list /capable-switch/logical-switches/switch/capabilities/action-types/type */
typedef struct y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_action_types_type_ {
    dlq_hdr_t qhdr;
    xmlChar *type;
} y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_action_types_type;

/* container /capable-switch/logical-switches/switch/capabilities/action-types */
typedef struct y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_action_types_ {
    dlq_hdr_t type;
} y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_action_types;

/* leaf-list /capable-switch/logical-switches/switch/capabilities/instruction-types/type */
typedef struct y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_instruction_types_type_ {
    dlq_hdr_t qhdr;
    xmlChar *type;
} y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_instruction_types_type;

/* container /capable-switch/logical-switches/switch/capabilities/instruction-types */
typedef struct y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_instruction_types_ {
    dlq_hdr_t type;
} y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_instruction_types;

/* container /capable-switch/logical-switches/switch/capabilities */
typedef struct y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_ {
    uint32 max_buffered_packets;
    uint8 max_tables;
    uint32 max_ports;
    boolean flow_statistics;
    boolean table_statistics;
    boolean port_statistics;
    boolean group_statistics;
    boolean queue_statistics;
    boolean reassemble_ip_fragments;
    boolean block_looping_ports;
    y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_reserved_port_types reserved_port_types;
    y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_group_types group_types;
    y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_group_capabilities group_capabilities;
    y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_action_types action_types;
    y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities_instruction_types instruction_types;
} y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities;

/* leaf-list /capable-switch/logical-switches/switch/controllers/controller/state/supported-versions */
typedef struct y_onf_config1_1_T_capable_switch_logical_switches_switch_controllers_controller_state_supported_versions_ {
    dlq_hdr_t qhdr;
    xmlChar *supported_versions;
} y_onf_config1_1_T_capable_switch_logical_switches_switch_controllers_controller_state_supported_versions;

/* container /capable-switch/logical-switches/switch/controllers/controller/state */
typedef struct y_onf_config1_1_T_capable_switch_logical_switches_switch_controllers_controller_state_ {
    xmlChar *connection_state;
    xmlChar *current_version;
    dlq_hdr_t supported_versions;
} y_onf_config1_1_T_capable_switch_logical_switches_switch_controllers_controller_state;

/* list /capable-switch/logical-switches/switch/controllers/controller */
typedef struct y_onf_config1_1_T_capable_switch_logical_switches_switch_controllers_controller_ {
    dlq_hdr_t qhdr;
    xmlChar *id;
    xmlChar *role;
    val_value_t *ip_address;
    uint16 port;
    val_value_t *local_ip_address;
    uint16 local_port;
    xmlChar *protocol;
    y_onf_config1_1_T_capable_switch_logical_switches_switch_controllers_controller_state state;
} y_onf_config1_1_T_capable_switch_logical_switches_switch_controllers_controller;

/* container /capable-switch/logical-switches/switch/controllers */
typedef struct y_onf_config1_1_T_capable_switch_logical_switches_switch_controllers_ {
    dlq_hdr_t controller;
} y_onf_config1_1_T_capable_switch_logical_switches_switch_controllers;

/* leaf-list /capable-switch/logical-switches/switch/resources/port */
typedef struct y_onf_config1_1_T_capable_switch_logical_switches_switch_resources_port_ {
    dlq_hdr_t qhdr;
    xmlChar *port;
} y_onf_config1_1_T_capable_switch_logical_switches_switch_resources_port;

/* leaf-list /capable-switch/logical-switches/switch/resources/queue */
typedef struct y_onf_config1_1_T_capable_switch_logical_switches_switch_resources_queue_ {
    dlq_hdr_t qhdr;
    xmlChar *queue;
} y_onf_config1_1_T_capable_switch_logical_switches_switch_resources_queue;

/* leaf-list /capable-switch/logical-switches/switch/resources/flow-table */
typedef struct y_onf_config1_1_T_capable_switch_logical_switches_switch_resources_flow_table_ {
    dlq_hdr_t qhdr;
    xmlChar *flow_table;
} y_onf_config1_1_T_capable_switch_logical_switches_switch_resources_flow_table;

/* container /capable-switch/logical-switches/switch/resources */
typedef struct y_onf_config1_1_T_capable_switch_logical_switches_switch_resources_ {
    dlq_hdr_t port;
    dlq_hdr_t queue;
    xmlChar *certificate;
    dlq_hdr_t flow_table;
} y_onf_config1_1_T_capable_switch_logical_switches_switch_resources;

/* list /capable-switch/logical-switches/switch */
typedef struct y_onf_config1_1_T_capable_switch_logical_switches_switch_ {
    dlq_hdr_t qhdr;
    xmlChar *id;
    y_onf_config1_1_T_capable_switch_logical_switches_switch_capabilities capabilities;
    xmlChar *datapath_id;
    boolean enabled;
    y_onf_config1_1_T_capable_switch_logical_switches_switch_controllers controllers;
    y_onf_config1_1_T_capable_switch_logical_switches_switch_resources resources;
} y_onf_config1_1_T_capable_switch_logical_switches_switch;

/* container /capable-switch/logical-switches */
typedef struct y_onf_config1_1_T_capable_switch_logical_switches_ {
    dlq_hdr_t switch;
} y_onf_config1_1_T_capable_switch_logical_switches;

/* container /capable-switch */
typedef struct y_onf_config1_1_T_capable_switch_ {
    xmlChar *id;
    y_onf_config1_1_T_capable_switch_configuration_points configuration_points;
    y_onf_config1_1_T_capable_switch_resources resources;
    y_onf_config1_1_T_capable_switch_logical_switches logical_switches;
} y_onf_config1_1_T_capable_switch;
/********************************************************************
* FUNCTION y_onf_config1_1_init
* 
* initialize the onf-config1.1 server instrumentation library
* 
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_onf_config1_1_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION y_onf_config1_1_init2
* 
* SIL init phase 2: non-config data structures
* Called after running config is loaded
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_onf_config1_1_init2 (void);

/********************************************************************
* FUNCTION y_onf_config1_1_cleanup
*    cleanup the server instrumentation library
* 
********************************************************************/
extern void y_onf_config1_1_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif